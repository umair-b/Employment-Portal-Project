// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentEmployementPortal.Data;

#nullable disable

namespace StudentEmployementPortal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"));

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("PostId");

                    b.HasIndex("StudentId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.BusinessType", b =>
                {
                    b.Property<int>("BusinessTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessTypeId");

                    b.ToTable("BusinessTypes");

                    b.HasData(
                        new
                        {
                            BusinessTypeId = 1,
                            Name = "Sole Proprietorship"
                        },
                        new
                        {
                            BusinessTypeId = 2,
                            Name = "Partnership"
                        },
                        new
                        {
                            BusinessTypeId = 3,
                            Name = "Private Limited Company (Pty Ltd)"
                        },
                        new
                        {
                            BusinessTypeId = 4,
                            Name = "Public Limited Company (Ltd)"
                        },
                        new
                        {
                            BusinessTypeId = 5,
                            Name = "Close Corporation (CC)"
                        },
                        new
                        {
                            BusinessTypeId = 6,
                            Name = "Nonprofit Organization (NPO)"
                        },
                        new
                        {
                            BusinessTypeId = 7,
                            Name = "State Owned Entity (SOE)"
                        },
                        new
                        {
                            BusinessTypeId = 8,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "Accountancy",
                            FacultyId = 1
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "Business Sciences",
                            FacultyId = 1
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Economics and Finance",
                            FacultyId = 1
                        },
                        new
                        {
                            DepartmentId = 4,
                            DepartmentName = "Law",
                            FacultyId = 1
                        },
                        new
                        {
                            DepartmentId = 5,
                            DepartmentName = "Wits Business School",
                            FacultyId = 1
                        },
                        new
                        {
                            DepartmentId = 6,
                            DepartmentName = "Wits School of Governance",
                            FacultyId = 1
                        },
                        new
                        {
                            DepartmentId = 7,
                            DepartmentName = "Architecture and Planning",
                            FacultyId = 2
                        },
                        new
                        {
                            DepartmentId = 8,
                            DepartmentName = "Civil & Environmental Engineering",
                            FacultyId = 2
                        },
                        new
                        {
                            DepartmentId = 9,
                            DepartmentName = "Chemical & Metallurgical Engineering",
                            FacultyId = 2
                        },
                        new
                        {
                            DepartmentId = 10,
                            DepartmentName = "Construction Economics & Management",
                            FacultyId = 2
                        },
                        new
                        {
                            DepartmentId = 11,
                            DepartmentName = "Electrical & Information Engineeringg",
                            FacultyId = 2
                        },
                        new
                        {
                            DepartmentId = 12,
                            DepartmentName = "Mechanical, Industrial & Aeronautical Engineering",
                            FacultyId = 2
                        },
                        new
                        {
                            DepartmentId = 13,
                            DepartmentName = "Mining Engineering",
                            FacultyId = 2
                        },
                        new
                        {
                            DepartmentId = 14,
                            DepartmentName = "Anatomical Sciences",
                            FacultyId = 3
                        },
                        new
                        {
                            DepartmentId = 15,
                            DepartmentName = "Clinical Medicine",
                            FacultyId = 3
                        },
                        new
                        {
                            DepartmentId = 16,
                            DepartmentName = "Oral Health Sciences",
                            FacultyId = 3
                        },
                        new
                        {
                            DepartmentId = 17,
                            DepartmentName = "Pathology",
                            FacultyId = 3
                        },
                        new
                        {
                            DepartmentId = 18,
                            DepartmentName = "Physiology",
                            FacultyId = 3
                        },
                        new
                        {
                            DepartmentId = 19,
                            DepartmentName = "Public Health",
                            FacultyId = 3
                        },
                        new
                        {
                            DepartmentId = 20,
                            DepartmentName = "Therapeutic Sciences",
                            FacultyId = 3
                        },
                        new
                        {
                            DepartmentId = 21,
                            DepartmentName = "Wits School of Arts",
                            FacultyId = 4
                        },
                        new
                        {
                            DepartmentId = 22,
                            DepartmentName = "Wits School of Education",
                            FacultyId = 4
                        },
                        new
                        {
                            DepartmentId = 23,
                            DepartmentName = "Human and Community Development",
                            FacultyId = 4
                        },
                        new
                        {
                            DepartmentId = 24,
                            DepartmentName = "Literature, Language and Media",
                            FacultyId = 4
                        },
                        new
                        {
                            DepartmentId = 25,
                            DepartmentName = "Social Sciences",
                            FacultyId = 4
                        },
                        new
                        {
                            DepartmentId = 26,
                            DepartmentName = "Animal, Plant and Environmental Sciences",
                            FacultyId = 5
                        },
                        new
                        {
                            DepartmentId = 27,
                            DepartmentName = "Chemistry",
                            FacultyId = 5
                        },
                        new
                        {
                            DepartmentId = 28,
                            DepartmentName = "Computer Science and Applied Mathematics",
                            FacultyId = 5
                        },
                        new
                        {
                            DepartmentId = 29,
                            DepartmentName = "Geography, Archaeology and Environmental Sciences",
                            FacultyId = 5
                        },
                        new
                        {
                            DepartmentId = 30,
                            DepartmentName = "Geosciences",
                            FacultyId = 5
                        },
                        new
                        {
                            DepartmentId = 31,
                            DepartmentName = "Mathematics",
                            FacultyId = 5
                        },
                        new
                        {
                            DepartmentId = 32,
                            DepartmentName = "Molecular and Cell Biology",
                            FacultyId = 5
                        },
                        new
                        {
                            DepartmentId = 33,
                            DepartmentName = "Physics",
                            FacultyId = 5
                        },
                        new
                        {
                            DepartmentId = 34,
                            DepartmentName = "Statistics and Actuarial Science",
                            FacultyId = 5
                        });
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("FileDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.DriversLicense", b =>
                {
                    b.Property<int>("LicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseId"));

                    b.Property<string>("LicenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LicenseId");

                    b.ToTable("Licences");

                    b.HasData(
                        new
                        {
                            LicenseId = 1,
                            LicenceName = "Code A1 driver's license"
                        },
                        new
                        {
                            LicenseId = 2,
                            LicenceName = "Code A driver's license"
                        },
                        new
                        {
                            LicenseId = 3,
                            LicenceName = "Code B driver's license"
                        },
                        new
                        {
                            LicenseId = 4,
                            LicenceName = "Code B5 driver's license"
                        },
                        new
                        {
                            LicenseId = 5,
                            LicenceName = "Code B7 driver's license"
                        },
                        new
                        {
                            LicenseId = 6,
                            LicenceName = "Code C driver's license"
                        },
                        new
                        {
                            LicenseId = 7,
                            LicenceName = "Code C1 driver's license"
                        },
                        new
                        {
                            LicenseId = 8,
                            LicenceName = "Code EB driver's license"
                        },
                        new
                        {
                            LicenseId = 9,
                            LicenceName = "Code EC driver's license"
                        },
                        new
                        {
                            LicenseId = 10,
                            LicenceName = "Code EC1 driver's license"
                        },
                        new
                        {
                            LicenseId = 11,
                            LicenceName = "Code EC1-8 driver's license"
                        },
                        new
                        {
                            LicenseId = 12,
                            LicenceName = "None"
                        });
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Majors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Research")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubMajors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subjects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Employer", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApproverNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployerBusinessType")
                        .HasColumnType("int");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<int>("EmployerStatus")
                        .HasColumnType("int");

                    b.Property<int>("EmployerTitle")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TrueInfo")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Faculty", b =>
                {
                    b.Property<int>("FacultyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultyId"));

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FacultyId");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            FacultyId = 1,
                            FacultyName = "Faculty of Commerce, Law and Management"
                        },
                        new
                        {
                            FacultyId = 2,
                            FacultyName = "Faculty of Engineering and the Built Environment"
                        },
                        new
                        {
                            FacultyId = 3,
                            FacultyName = "Faculty of Health Sciences"
                        },
                        new
                        {
                            FacultyId = 4,
                            FacultyName = "Faculty of Humanities"
                        },
                        new
                        {
                            FacultyId = 5,
                            FacultyName = "Faculty of Science"
                        });
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            GenderId = 1,
                            GenderName = "Male"
                        },
                        new
                        {
                            GenderId = 2,
                            GenderName = "Female"
                        },
                        new
                        {
                            GenderId = 3,
                            GenderName = "Non-binary"
                        },
                        new
                        {
                            GenderId = 4,
                            GenderName = "Other"
                        },
                        new
                        {
                            GenderId = 5,
                            GenderName = "Prefer not to say."
                        });
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.JobPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("ApplicationInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApproverNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CitizensOnly")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ClosingDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<bool?>("FullTime")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<double?>("HourlyRate")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<bool?>("Internal")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyResponsibilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartTimeHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<bool>("limitedToFirst")
                        .HasColumnType("bit");

                    b.Property<bool>("limitedToHonours")
                        .HasColumnType("bit");

                    b.Property<bool>("limitedToMasters")
                        .HasColumnType("bit");

                    b.Property<bool>("limitedToPhD")
                        .HasColumnType("bit");

                    b.Property<bool>("limitedToPostDoc")
                        .HasColumnType("bit");

                    b.Property<bool>("limitedToSecond")
                        .HasColumnType("bit");

                    b.Property<bool>("limitedToThird")
                        .HasColumnType("bit");

                    b.HasKey("PostId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("FacultyId");

                    b.ToTable("JobPosts");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Race", b =>
                {
                    b.Property<int>("RaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RaceId"));

                    b.Property<string>("RaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaceId");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            RaceId = 1,
                            RaceName = "Black"
                        },
                        new
                        {
                            RaceId = 2,
                            RaceName = "White"
                        },
                        new
                        {
                            RaceId = 3,
                            RaceName = "Coloured"
                        },
                        new
                        {
                            RaceId = 4,
                            RaceName = "Indian"
                        },
                        new
                        {
                            RaceId = 5,
                            RaceName = "Other"
                        });
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Referee", b =>
                {
                    b.Property<int>("RefereeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefereeId"));

                    b.Property<int>("CellNumber")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefereeId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("Referees");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Student", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Achievements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CareerObjective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Citizen")
                        .HasColumnType("bit");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.Property<int>("RaceId")
                        .HasColumnType("int");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LicenseId");

                    b.HasIndex("RaceId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkExperienceId"));

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TasksAndResponsibilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkExperienceId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("WorkExperience");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CellNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Application", b =>
                {
                    b.HasOne("StudentEmployementPortal.Models.JobPost", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployementPortal.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Document", b =>
                {
                    b.HasOne("StudentEmployementPortal.Models.Application", "Application")
                        .WithMany("Documents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Education", b =>
                {
                    b.HasOne("StudentEmployementPortal.Models.Student", "Student")
                        .WithMany("Education")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Employer", b =>
                {
                    b.HasOne("StudentEmployementPortal.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.JobPost", b =>
                {
                    b.HasOne("StudentEmployementPortal.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployementPortal.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployementPortal.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Referee", b =>
                {
                    b.HasOne("StudentEmployementPortal.Models.Student", "Student")
                        .WithMany("Referee")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Student", b =>
                {
                    b.HasOne("StudentEmployementPortal.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployementPortal.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployementPortal.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployementPortal.Models.DriversLicense", "License")
                        .WithMany()
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployementPortal.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEmployementPortal.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Faculty");

                    b.Navigation("Gender");

                    b.Navigation("License");

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.WorkExperience", b =>
                {
                    b.HasOne("StudentEmployementPortal.Models.Student", "Student")
                        .WithMany("WorkExperience")
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Application", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("StudentEmployementPortal.Models.Student", b =>
                {
                    b.Navigation("Education");

                    b.Navigation("Referee");

                    b.Navigation("WorkExperience");
                });
#pragma warning restore 612, 618
        }
    }
}
